<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Promotional Leaderboard</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
</head>

<body>
    <div id="root"></div>

    <script type="text/babel">
        // --- Mock Data ---
        // This data is generated by applying the logic from `gemini.sql` to the
        // sample data in `tables-and-data.sql`. This simulates the expected output
        // from your Laravel service class.
        const mockLeaderboardData = [
            { player_rank: 1, player_id: 101, username: 'ace_player', total_wagered: 800.00, total_net_result: 200.00, performance_score: 2100 },
            { player_rank: 2, player_id: 102, username: 'lady_luck', total_wagered: 1300.00, total_net_result: -125.00, performance_score: 1400 },
            { player_rank: 2, player_id: 103, username: 'jackpot_joe', total_wagered: 700.00, total_net_result: -200.00, performance_score: 1400 },
        ];

        // --- Helper Components ---

        // A simple loading spinner component
        const Spinner = () => (
            <div className="flex justify-center items-center p-8">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-500"></div>
            </div>
        );

        // Component to render a single row in the leaderboard table
        const LeaderboardRow = ({ rank, username, score }) => (
            <tr className="border-b border-gray-200 hover:bg-gray-100 transition-colors duration-200">
                <td className="py-3 px-4 text-center font-semibold text-gray-700">{rank}</td>
                <td className="py-3 px-4 text-left text-gray-800">{username}</td>
                <td className="py-3 px-4 text-right font-mono text-indigo-600">{score.toLocaleString()}</td>
            </tr>
        );

        // The main application component
        function App() {
            const [leaderboardData, setLeaderboardData] = React.useState([]);
            const [isLoading, setIsLoading] = React.useState(true);
            const [error, setError] = React.useState(null);
            const [pagination, setPagination] = React.useState({
                current_page: 1,
                per_page: 20,
                total: 0,
                total_pages: 1
            });

            const fetchLeaderboardData = React.useCallback((page = 1, forceRefresh = false) => {
                setIsLoading(true);
                setError(null);
                
                const url = `/leaderboard?page=${page}&per_page=20${forceRefresh ? '&refresh=true' : ''}`;
    

                fetch(`/leaderboard?page=${page}&per_page=20`)
                    .then(response => {
                        if (!response.ok) throw new Error('Network response was not ok');
                        return response.json();
                    })
                    .then(responseData => {
                        // get data from responseData.data
                        setLeaderboardData(responseData.data);
                        setPagination(responseData.meta);
                    })
                    .catch(err => {
                        setError(err.message);
                    })
                    .finally(() => {
                        setIsLoading(false);
                    });
            }, []);

            React.useEffect(() => {
                fetchLeaderboardData(1);
            }, [fetchLeaderboardData]);

            const handlePageChange = (newPage) => {
                if (newPage >= 1 && newPage <= pagination.total_pages) {
                    fetchLeaderboardData(newPage);
                }
            };

            return (
                <div className="bg-gray-50 min-h-screen font-sans text-gray-800 p-4 sm:p-6 lg:p-8">
                    <div className="max-w-4xl mx-auto">
                        {/* Header */}
                        <header className="mb-6">
                            <h1 className="text-3xl sm:text-4xl font-bold text-gray-900 tracking-tight">Promotional Leaderboard</h1>
                            <p className="text-gray-600 mt-1">Check out the current standings and player performance.</p>
                        </header>

                        {/* Control Bar */}
                        <div className="flex justify-between items-center mb-4">
                            <div className="text-sm text-gray-600">
                                Showing {pagination.from} to {pagination.to} of {pagination.total} players
                            </div>
                            <button
                                onClick={() => fetchLeaderboardData(pagination.current_page)}
                                disabled={isLoading}
                                className="flex items-center justify-center bg-indigo-600 text-white font-semibold py-2 px-4 rounded-lg shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-300 disabled:cursor-not-allowed transition-all duration-300"
                            >
                                {isLoading ? (
                                    <>
                                        <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                        </svg>
                                        Refreshing...
                                    </>
                                ) : (
                                    <>
                                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h5M20 20v-5h-5M4 4l1.5 1.5A9 9 0 0120.5 15" />
                                        </svg>
                                        Refresh Data
                                    </>
                                )}
                            </button>
                        </div>

                        {/* Leaderboard Table */}
                        <div className="bg-white rounded-xl shadow-lg overflow-hidden">
                            <div className="overflow-x-auto">
                                <table className="w-full text-sm">
                                    <thead className="bg-gray-100 border-b-2 border-gray-200">
                                        <tr>
                                            <th className="py-3 px-4 text-center font-bold uppercase text-gray-600 tracking-wider">Rank</th>
                                            <th className="py-3 px-4 text-left font-bold uppercase text-gray-600 tracking-wider">Player</th>
                                            <th className="py-3 px-4 text-right font-bold uppercase text-gray-600 tracking-wider">Score</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {isLoading && leaderboardData.length === 0 ? (
                                            <tr>
                                                <td colSpan="3">
                                                    <div className="flex justify-center items-center p-8">
                                                        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-500"></div>
                                                    </div>
                                                </td>
                                            </tr>
                                        ) : error ? (
                                            <tr>
                                                <td colSpan="3" className="text-center py-8 px-4 text-red-500 font-semibold">
                                                    {error}
                                                </td>
                                            </tr>
                                        ) : (
                                            leaderboardData.map(player => (
                                                <LeaderboardRow
                                                    key={player.player_id}
                                                    rank={player.player_rank}
                                                    username={player.username}
                                                    score={player.performance_score}
                                                />
                                            ))
                                        )}
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        {/* Pagination */}
                        {pagination.total_pages > 1 && (
                            <div className="flex justify-center mt-6 space-x-2">
                                <button
                                    onClick={() => handlePageChange(pagination.current_page - 1)}
                                    disabled={pagination.current_page === 1 || isLoading}
                                    className="px-4 py-2 bg-gray-200 rounded disabled:opacity-50 hover:bg-gray-300 transition-colors"
                                >
                                    Previous
                                </button>
                                
                                {Array.from({ length: pagination.total_pages }, (_, i) => i + 1)
                                    .slice(Math.max(0, pagination.current_page - 3), Math.min(pagination.total_pages, pagination.current_page + 2))
                                    .map(page => (
                                    <button
                                        key={page}
                                        onClick={() => handlePageChange(page)}
                                        disabled={isLoading}
                                        className={`px-3 py-1 rounded ${
                                            pagination.current_page === page 
                                            ? 'bg-indigo-600 text-white' 
                                            : 'bg-gray-200 hover:bg-gray-300'
                                        } transition-colors`}
                                    >
                                        {page}
                                    </button>
                                ))}
                                
                                <button
                                    onClick={() => handlePageChange(pagination.current_page + 1, true /* force refresh */)}
                                    disabled={pagination.current_page === pagination.total_pages || isLoading}
                                    className="px-4 py-2 bg-gray-200 rounded disabled:opacity-50 hover:bg-gray-300 transition-colors"
                                >
                                    Next
                                </button>
                            </div>
                        )}

                        {/* Footer */}
                        <footer className="text-center mt-8 text-sm text-gray-500">
                            <p>&copy; {new Date().getFullYear()} Entain PLC. Igor Savinkin.</p>
                        </footer>
                    </div>
                </div>
            );
        }

        // Render the app
        ReactDOM.render(React.createElement(App), document.getElementById('root'));
    </script>
</body>

</html>